{"map":"{\"version\":3,\"file\":\"script-runner.js\",\"sourceRoot\":\"\",\"sources\":[\"../../lib/script-runner.ts\"],\"names\":[],\"mappings\":\";AAAA,IAAM,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;AACpC,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAC5B,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAEpB,IAAA,wDAAiB,CAAuB;AAEhD,qGAAqG;AACrG,yEAAyE;AACzE,kEAAkE;AAClE,uFAAuF;AACvF,EAAE;AACF,+CAA+C;AACzC,IAAA,iBAAmD,EAAlD,gBAAQ,EAAE,WAAG,EAAE,kBAAU,EAAE,kBAAuB,CAAA;AAEzD,IAAI,UAAU,EAAE;IACd,WAAW,EAAE,CAAA;CACd;KAAM;IACL,IAAM,aAAW,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC,CAAA;IACpD,IAAM,gBAAgB,GAAa,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC,CAAA;IAElF,IAAM,uBAAuB,GAAG,gBAAgB;SAC7C,GAAG,CACF,UAAA,MAAM,IAAI,OAAA,MAAM;SACb,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;SACxB,OAAO,CAAC,aAAW,EAAE,EAAE,CAAC,EAFjB,CAEiB,CAC5B;SACA,MAAM,CAAC,OAAO,CAAC;SACf,IAAI,CAAC,KAAK,CAAC,CAAA;IAEd,IAAM,WAAW,GAAG,cACb,GAAG,oDAGT,uBAAuB,SACvB,CAAA;IAED,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;IAExB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;CAChB;AAED,SAAS,WAAW;IAClB,IAAM,kBAAkB,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,CAAA;IACtE,oCAAoC;IACpC,8DAA8D;IAC9D,2BAA2B;IAC3B,IAAM,cAAc,GAAG,gBAAgB,CAAC,kBAAkB,CAAC,CAAA;IAE3D,IAAI,CAAC,cAAc,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,sBAAmB,UAAU,OAAG,CAAC,CAAA;KAClD;IAEK,IAAA;;MAEJ,EAFM,kBAAM,EAAE,kBAEd,CAAA;IAEF,IAAI,MAAM,EAAE;QACV,iBAAiB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAA;KACtC;SAAM;QACL,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;KACrB;AACH,CAAC;AAED,SAAS,gBAAgB,CAAC,IAAY;IACpC,IAAI;QACF,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;KAC7B;IAAC,OAAM,KAAK,EAAE;QACb,OAAO,IAAI,CAAC;KACb;AACH,CAAC\"}","code":"\"use strict\";\r\nvar spawn = require('cross-spawn');\r\nvar path = require('path');\r\nvar glob = require('glob');\r\nvar handleSpawnSignal = require('./utils').handleSpawnSignal;\r\n// executor - programm, that run our binary (npx, node, ts-node). Binary, that starts another binary.\r\n// bin - name (jupiter-scripts) or path (lib (node lib)) of/to our binary\r\n// scriptName - name of script we want to execute with our binary)\r\n// args - array of arguments, that should be passed to script we try to run with binary\r\n//\r\n// So, executor runs binary, binary runs script\r\nvar _a = process.argv, executor = _a[0], bin = _a[1], scriptName = _a[2], args = _a.slice(3);\r\nif (scriptName) {\r\n    spawnScript();\r\n}\r\nelse {\r\n    var scriptsPath_1 = path.join(__dirname, 'scripts/');\r\n    var availableScripts = glob.sync(path.join(__dirname, 'scripts', '*'));\r\n    var availableScriptsMessage = availableScripts\r\n        .map(function (script) { return script\r\n        .replace('__tests__', '')\r\n        .replace(scriptsPath_1, ''); })\r\n        .filter(Boolean)\r\n        .join('\\n ');\r\n    var fullMessage = \"\\nUsage: \" + bin + \" [script] [--flags]\\n\\nAvailable Scripts:\\n \" + availableScriptsMessage + \"\\n  \";\r\n    console.log(fullMessage);\r\n    process.exit(0);\r\n}\r\nfunction spawnScript() {\r\n    var relativeScriptPath = path.join(__dirname, 'scripts', scriptName);\r\n    // by default it search for index.js\r\n    // if there's package.json, path will be generated to the file\r\n    // in main package.json key\r\n    var mainScriptPath = attemptToResolve(relativeScriptPath);\r\n    if (!mainScriptPath) {\r\n        throw new Error(\"Unknown script \\\"\" + scriptName + \"\\\"\");\r\n    }\r\n    var _a = spawn.sync('ts-node', [mainScriptPath].concat(args), {\r\n        stdio: 'inherit',\r\n    }), signal = _a.signal, status = _a.status;\r\n    if (signal) {\r\n        handleSpawnSignal(scriptName, signal);\r\n    }\r\n    else {\r\n        process.exit(status);\r\n    }\r\n}\r\nfunction attemptToResolve(path) {\r\n    try {\r\n        return require.resolve(path);\r\n    }\r\n    catch (error) {\r\n        return null;\r\n    }\r\n}\r\n//# sourceMappingURL=script-runner.js.map","dts":{"name":"/Users/kirillleontev/Sites/scripts/script-runner.d.ts","writeByteOrderMark":false,"text":"declare const spawn: any;\r\ndeclare const path: any;\r\ndeclare const glob: any;\r\ndeclare const handleSpawnSignal: any;\r\ndeclare const executor: string, bin: string, scriptName: string, args: string[];\r\ndeclare function spawnScript(): void;\r\ndeclare function attemptToResolve(path: string): string | null;\r\n"}}
